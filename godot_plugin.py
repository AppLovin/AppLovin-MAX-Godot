#!/usr/bin/python
#
#  Python script used for developing, building, and managing the Godot plugin and environment
#
#  Created by Christopher Cong on 12/02/24.
#
#  Usage: python godot_plugin.py <command> [arguments]
#

import os
import sys
import tarfile
import shutil
import subprocess
try:
    # Python 3
    from urllib.request import urlretrieve
except ImportError:
    # Python 2
    from urllib import urlretrieve

def show_help():
    help_text = """
Godot Build Script
-------------------
Usage: python godot_plugin.py <command> [arguments]

Main Commands:
  prepare_ios_plugin <VERSION>    Prepare the iOS plugin for development. Clean, download Godot, and generate iOS headers.
  
  build                           Run the build process without cleaning or downloading.
  clean_and_build <GODOT_VERSION> Perform a complete clean and build.

Sub Commands:
  clean                           Remove artifacts generated by previous builds and/or downloads.
  download <GODOT_VERSION>        Download and extract the specified Godot version.
  generate_ios_headers            Generate iOS headers using SCons.

Options:
  -h, --help                     Show this help message and exit.

Examples:
  python godot_plugin.py clean
  python godot_plugin.py build
  python godot_plugin.py clean_and_build 4.3
  python godot_plugin.py download 4.3
  python godot_plugin.py generate_ios_headers

Description:
  This script automates the build process for Godot projects, including downloading specific versions,
  generating iOS headers, and performing clean and build. It combines common tasks into a single utility.

Report issues or contribute to the script on this repository.
"""
    print(help_text)

# Clean up artifacts generated by previous builds or downloads.
def clean():
    print("Cleaning up old artifacts and builds...")
    
    # Remove the 'godot' folder if it exists
    if os.path.exists("godot"):
        print("Removing 'godot' folder...")
        shutil.rmtree("godot")
    
    # Remove any .tar.xz files
    for file in os.listdir("."):
        if file.endswith(".tar.xz"):
            print("Removing archive: {}...".format(file))
            os.remove(file)
    
    print("Clean complete.")

# Prepare the iOS plugin for development by cleaning, downloading Godot, and generating iOS headers.
def prepare_ios_plugin(version):
    if not version:
        print("Error: Please provide the Godot version as an argument.")
        sys.exit(1)

    try:
        print("Preparing iOS plugin...")
        
        clean()
        
        download_godot(version)
        
        generate_ios_headers()

    except subprocess.CalledProcessError as e:
        print("Prepare iOS plugin failed: {}".format(e))

# Run the build process without cleaning or downloading.
def build():
    try:
        print("Running build process...")
        generate_ios_headers()
        print("Running release_xcframework.sh...")
        subprocess.run(["./scripts/release_xcframework.sh"], check=True)
    except subprocess.CalledProcessError as e:
        print("Build failed: {}".format(e))

# Clean artifacts, download Godot, and bulid.
def clean_and_build(version):
    if not version:
        print("Error: Please provide the Godot version as an argument.")
        sys.exit(1)

    try:
        print("Starting clean and build process...")
        
        clean()
        
        download_godot(version)
        
        build()

    except subprocess.CalledProcessError as e:
        print("Clean and build failed: {}".format(e))

# Downloads the official Godot engine
def download_godot(version):
    if not version:
        print("Error: Please provide the Godot version as an argument.")
        sys.exit(1)

    godot_folder = "godot-{}-stable".format(version)
    download_file = "{}.tar.xz".format(godot_folder)
    url = "https://github.com/godotengine/godot/releases/download/{}-stable/{}".format(version, download_file)

    print("Downloading Godot version {} from {}...".format(version, url))
    urlretrieve(url, download_file)

    print("Extracting {}...".format(download_file))
    with tarfile.open(download_file, "r:xz") as tar:
        tar.extractall()

    if os.path.exists("godot"):
        print("Deleting existing 'godot' folder...")
        shutil.rmtree("godot")

    os.rename(godot_folder, "godot")
    os.remove(download_file)
    print("Download and extraction complete.")
  
# Generate the engine iOS headers for the iOS plugin to import
def generate_ios_headers():
    try:
        os.chdir("./godot")
        print("Running SCons to generate iOS headers...")
        subprocess.call(["scons", "platform=ios", "target=template_release"])
    except Exception as e:
        print("Error while generating iOS headers: {}".format(e))
    finally:
        os.chdir("..")

def main():
    if len(sys.argv) < 2:
        show_help()
        sys.exit(1)

    command = sys.argv[1]

    if command in ("-h", "--help"):
        show_help()
    elif command == "clean":
        clean()
    elif command == "download":
        if len(sys.argv) < 3:
            print("Error: 'download' command requires a Godot version as an argument.")
            sys.exit(1)
        download_godot(sys.argv[2])
    elif command == "generate_ios_headers":
        generate_ios_headers()
    elif command == "build":
        build()
    elif command == "clean_and_build":
        if len(sys.argv) < 3:
            print("Error: 'clean_and_build' command requires a Godot version as an argument.")
            sys.exit(1)
        clean_and_build(sys.argv[2])
    elif command == "prepare_ios_plugin":
        if len(sys.argv) < 3:
            print("Error: 'prepare_ios_plugin' command requires a Godot version as an argument.")
            sys.exit(1)
        prepare_ios_plugin(sys.argv[2])
    else:
        print("Unknown command: {}".format(command))
        show_help()
        sys.exit(1)

if __name__ == "__main__":
    main()
